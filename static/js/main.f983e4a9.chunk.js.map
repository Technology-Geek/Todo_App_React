{"version":3,"sources":["Components/TodoItem.jsx","Components/AddTodoDialog.jsx","Components/TodoList.jsx","App.jsx","index.js"],"names":["TodoItem","item","changeHandler","ListItem","button","dense","divider","style","textDecorationLine","checked","onClick","id","ListItemText","primary","body","ListItemIcon","Checkbox","edge","tabIndex","disableRipple","ListItemSecondaryAction","IconButton","color","orange","A700","Delete","AddTodoDialog","open","handleOpen","handleConfirm","Dialog","TransitionComponent","Zoom","onClose","onSubmit","e","preventDefault","target","name","value","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","margin","label","fullWidth","DialogActions","Button","type","TodoList","state","todoList","addTodoDialogIsOpen","idCounter","handleTodoDialogOpen","isOpen","setState","handleChange","action","find","filter","Fragment","Paper","elevation","autoHeightMax","autoHeight","List","this","length","Box","ml","Typography","variant","map","key","Fab","size","backgroundColor","lightGreen","bottom","right","position","Add","Component","theme","createMuiTheme","palette","App","CssBaseline","Container","maxWidth","align","gutterBottom","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f983e4a9.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  ListItem,\r\n  ListItemText,\r\n  Checkbox,\r\n  ListItemIcon,\r\n  ListItemSecondaryAction,\r\n  IconButton,\r\n} from '@material-ui/core';\r\nimport { Delete as DeleteIcon } from '@material-ui/icons';\r\nimport { orange } from '@material-ui/core/colors';\r\n\r\nfunction TodoItem({ item, changeHandler }) {\r\n  return (\r\n    <ListItem\r\n      button\r\n      dense\r\n      divider\r\n      style={{ textDecorationLine: item.checked ? 'line-through' : 'none' }}\r\n      onClick={() =>\r\n        changeHandler('Check', { id: item.id, checked: item.checked })\r\n      }\r\n    >\r\n      <ListItemText primary={item.body} />\r\n      <ListItemIcon>\r\n        <Checkbox\r\n          edge=\"end\"\r\n          checked={item.checked}\r\n          tabIndex={-1}\r\n          disableRipple\r\n        />\r\n      </ListItemIcon>\r\n      <ListItemSecondaryAction>\r\n        <IconButton\r\n          edge=\"end\"\r\n          style={{\r\n            color: orange.A700,\r\n          }}\r\n          onClick={() => changeHandler('Delete', item)}\r\n        >\r\n          <DeleteIcon />\r\n        </IconButton>\r\n      </ListItemSecondaryAction>\r\n    </ListItem>\r\n  );\r\n}\r\n\r\nTodoItem.propTypes = {\r\n  item: PropTypes.exact({\r\n    id: PropTypes.number,\r\n    body: PropTypes.string,\r\n    checked: PropTypes.bool,\r\n  }),\r\n  changeHandler: PropTypes.func,\r\n};\r\n\r\nexport default TodoItem;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  Button,\r\n  DialogTitle,\r\n  Dialog,\r\n  DialogContent,\r\n  DialogContentText,\r\n  TextField,\r\n  DialogActions,\r\n  Zoom,\r\n} from '@material-ui/core';\r\n\r\nfunction AddTodoDialog({ open, handleOpen, handleConfirm }) {\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    handleConfirm('Add', {\r\n      [e.target.body.name]: e.target.body.value,\r\n      isOpen: open,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      TransitionComponent={Zoom}\r\n      onClose={() => handleOpen(open)}\r\n    >\r\n      <form onSubmit={handleSubmit}>\r\n        <DialogTitle>Add Todo</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>Add New Todo Item</DialogContentText>\r\n          <TextField\r\n            autoFocus\r\n            margin=\"dense\"\r\n            name=\"body\"\r\n            label=\"Todo:\"\r\n            fullWidth\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => handleOpen(open)} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button type=\"submit\" color=\"primary\">\r\n            Add\r\n          </Button>\r\n        </DialogActions>\r\n      </form>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nAddTodoDialog.propTypes = {\r\n  open: PropTypes.bool,\r\n  handleOpen: PropTypes.func,\r\n  handleConfirm: PropTypes.func,\r\n};\r\n\r\nexport default AddTodoDialog;\r\n","import React, { Component } from 'react';\r\nimport { Paper, List, Typography, Box, Fab } from '@material-ui/core';\r\nimport TodoItem from './TodoItem';\r\nimport { Add as AddIcon } from '@material-ui/icons';\r\nimport { lightGreen } from '@material-ui/core/colors';\r\nimport AddTodoDialog from './AddTodoDialog';\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\nclass TodoList extends Component {\r\n  state = {\r\n    todoList: [\r\n      { id: 0, body: 'First Todo', checked: false },\r\n      { id: 1, body: 'Second Todo', checked: true },\r\n      { id: 2, body: 'Third Todo', checked: false },\r\n    ],\r\n    addTodoDialogIsOpen: false,\r\n  };\r\n  // Id counter for unique ids\r\n  idCounter = 3;\r\n\r\n  // Add todo dialog open/close handler\r\n  handleTodoDialogOpen = (isOpen) => {\r\n    this.setState({ addTodoDialogIsOpen: !isOpen });\r\n  };\r\n\r\n  // Todo Action Handler [ Check , Add , Delete ]\r\n  handleChange = (action, item) => {\r\n    switch (action) {\r\n      // Alter Todo Check value\r\n      case 'Check':\r\n        this.setState(({ todoList }) => {\r\n          let todo = todoList.find((value) => value.id === item.id);\r\n          todo.checked = !item.checked;\r\n          return { todoList };\r\n        });\r\n        break;\r\n      // Add Todo to List\r\n      case 'Add':\r\n        this.setState(\r\n          ({ todoList }) => {\r\n            return {\r\n              todoList: [\r\n                ...todoList,\r\n                { id: this.idCounter++, body: item.body, checked: false },\r\n              ],\r\n            };\r\n          },\r\n          () => this.handleTodoDialogOpen(item.isOpen)\r\n        );\r\n        break;\r\n      // Delete Todo From List by id\r\n      case 'Delete':\r\n        this.setState(({ todoList }) => {\r\n          const newTodoList = todoList.filter((value) => value.id !== item.id);\r\n          return { todoList: newTodoList };\r\n        });\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Paper elevation={13}>\r\n          <Scrollbars autoHeightMax=\"70vh\" autoHeight>\r\n            <List dense>\r\n              {/* Empty List Render Condition */}\r\n              {this.state.todoList.length === 0 ? (\r\n                <Box ml={2}>\r\n                  <Typography variant=\"h6\">Noting To Do</Typography>\r\n                </Box>\r\n              ) : (\r\n                // Todo List mapping => < TodoItem >\r\n                this.state.todoList.map((value) => (\r\n                  <TodoItem\r\n                    key={value.id}\r\n                    item={value}\r\n                    changeHandler={this.handleChange}\r\n                  />\r\n                ))\r\n              )}\r\n            </List>\r\n          </Scrollbars>\r\n        </Paper>\r\n        {/* Add Todo Button */}\r\n        <Fab\r\n          size=\"medium\"\r\n          style={{\r\n            backgroundColor: lightGreen.A700,\r\n            bottom: 23,\r\n            right: 23,\r\n            position: 'fixed',\r\n          }}\r\n          onClick={() =>\r\n            this.handleTodoDialogOpen(this.state.addTodoDialogIsOpen)\r\n          }\r\n        >\r\n          <AddIcon />\r\n        </Fab>\r\n        {/* Add Todo Dialog */}\r\n        <AddTodoDialog\r\n          open={this.state.addTodoDialogIsOpen}\r\n          handleOpen={this.handleTodoDialogOpen}\r\n          handleConfirm={this.handleChange}\r\n        />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoList;\r\n","import React from 'react';\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport { CssBaseline, Typography, Container } from '@material-ui/core';\nimport TodoList from './Components/TodoList';\n\nconst theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <MuiThemeProvider theme={theme}>\n        <CssBaseline />\n        <Container maxWidth=\"sm\">\n          <Typography variant=\"h2\" align=\"center\" gutterBottom>\n            Todo App\n          </Typography>\n          <TodoList />\n        </Container>\n      </MuiThemeProvider>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}